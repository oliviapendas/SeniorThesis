## ggplot Correlation Matrix for Geochemical Parameters ##

# Load required packages
library(readxl)
library(dplyr)
library(reshape2)      # For melting the correlation matrix
library(ggplot2)       # For ggplot functionality
library(colorspace)    # For diverging color palettes, if necessary

# Load your data
dat <- read_excel("El_Tatio_GDGTs_2025.xlsx")

# Select relevant geochemical parameters
params <- dat %>% select(pH, Salinity, Temp, DO, ORP)

# Calculate the correlation matrix
corr_matrix <- cor(params, use = "pairwise.complete.obs")

# Calculate p-values for the correlations
get_p_value <- function(x, y) {
  cor_test <- cor.test(x, y)
  return(cor_test$p.value)
}

# Create a matrix of p-values
p_matrix <- sapply(1:ncol(params), function(i) {
  sapply(1:ncol(params), function(j) {
    if (i == j) return(NA) # Set diagonal to NA
    else get_p_value(params[[i]], params[[j]])
  })
})

# Print the matrix of p-values for inspection
print("Matrix of p-values:")
print(p_matrix)

# Specify significance level
alpha <- 0.05

# Melt the correlation matrix to a long format for ggplot
corr_melted <- melt(corr_matrix)

# Add the corresponding p-value information to the melted data frame
corr_melted$p_value <- melt(p_matrix)$value

# Assign colors based on significance for the text
corr_melted$text_color <- ifelse(corr_melted$p_value < alpha, "black", "dimgray")

# Set up the ggplot for the correlation plot
png("ggplot_correlation_plot.png", width = 1200, height = 800, res = 300)

ggplot(corr_melted, aes(x = Var1, y = Var2)) +
  geom_tile(aes(fill = value), color = "white") +  # Tile color based on correlation
  geom_text(aes(label = round(value, 2)), 
            color = ifelse(corr_melted$p_value < alpha, "black", "dimgray"), size = 3) +  # Explicitly control text color
  scale_fill_gradient2(low = "blue", mid = "white", high = "red",
                       midpoint = 0, limit = c(-1, 1), name = "Correlation") +
  ggtitle("Correlation Matrix of Geochemical Parameters") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis labels
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        plot.title = element_text(hjust = 0.4, vjust = 1, size = 10))

# Close the device
dev.off()
