#### Ring Index vs. pH Comparison with points colored by temp ####

# Define a function to map temp values to colors in the 50 to 100 °C range
color_map <- colorRampPalette(c("blue", "red"))(100 - 50 + 1)

# Add a new column "col_Temp" with the corresponding color hex codes
dat <- transform(dat,
                 col_Temp = color_map[cut(Temp, breaks = 50, labels = FALSE) + 1])

# Linear regression
pHvsRI <- lm(Ring_index ~ pH, data = dat)
summary(pHvsRI)

# Extract the coefficients and R² value
coefficients <- coef(pHvsRI)
slope <- round(coefficients[2], 1)
intercept <- round(coefficients[1], 1)
r_squared <- round(summary(pHvsRI)$r.squared, 2)

# Save the plot as a PNG file
png("RingIndex_vs_pH.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$pH, dat$Ring_index,
     las = 1,
     xlim = c(1, 10),
     ylim = c(0, 5),
     pch = NA,  # Do not plot Default shape
     cex = 2,
     col = dat$col_Temp,  # Color code points by Temperature
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Add CL points (squares)
points(CL_data$pH, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = CL_data$col_Temp)  # Use color mapping

# Add IPL points (circles)
points(IPL_data$pH, IPL_data$Ring_index,  
       pch = 1,    # Circle shape for IPL
       cex = 1,   
       col = IPL_data$col_Temp)  # Use color mapping

# Add the regression line
abline(pHvsRI, col = "hotpink", lwd = 2)

# Don't add regression parameters
# equation_text <- paste("RI =", slope, "* pH +", intercept)
# r_squared_text <- paste("R² =", r_squared)
# text(3.5, 0.6, labels = equation_text, col = "grey", cex = 0.8)
# text(3, 0.2, labels = r_squared_text, col = "grey", cex = 0.8)

# Add axes
axis(1, at = seq(1, 10, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs pH", line = 0.5, cex.main = 1.2)
title(xlab = "pH", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1, cex.lab = 1.3)

# Legend positioned outside the graph area
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
legend("right", inset = c(-0.4, 2), title = "T °C",
       legend = seq(50, 100, by = 10),
       pch = 15,  # Square markers for temperature
       col = color_map[seq(1, 100, 10)],  # Color mapping for temperatures
       pt.cex = 3,
       bty = "n",
       y.intersp = 0.8,    # Closer spacing between legend items
       title.adj = 0.8)   # Center the title relative to legend items")
# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Placeholder colors
       pt.cex = 1, 
       bty = "n",x,
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries)

# Don't add the 95% CI to linear regression
# new_data <- data.frame(pH = seq(1, 10, length.out = 100))
# ci_new <- predict(pHvsRI, new_data, interval = "confidence", level = 0.95)

# Ensure the polygon ends at the bounds of the plotting area
# polygon(c(new_data$pH, rev(new_data$pH)),
        # c(pmax(ci_new[, "lwr"], 0), rev(pmin(ci_new[, "upr"], 5))),  # Clamp CI to plotting area
        # col = rgb(col2rgb("grey")[1] / 255,
                  # col2rgb("grey")[2] / 255,
                  # col2rgb("grey")[3] / 255,
                  # alpha = 0.3),
        # border = NA)  # No border

# Add the new regression line based on y = -0.26 * pH + 4.5
x_values <- seq(0.65, 10.3, length.out = 100)  # X values for the regression line
y_values <- -0.26 * x_values + 4.5  # Calculate corresponding Y values

# Add the new regression line to the existing plot
lines(x_values, y_values, col = "turquoise2", lty = 1, lwd = 2)

# Add a legend for the two regression lines with parameters
legend("bottomright", inset = c(0, 0),  
       legend = c(paste("El Tatio:", "RI =", slope, "* T +", intercept, " (R² =", r_squared, ")"),
                  paste("Yellowstone:", equation_yellowstone, " (R² = 0.645) ")),
       col = c("hotpink", "turquoise2"),  
       lty = c(2, 2),             
       lwd = 3,                  
       bty = "n",                
       cex = 0.5)  

# #### Ring Index vs. Temp Comparison with confidence intervals points colored by pH ####

# Assume the 'dat' data frame already exists and contains the required columns.
cat("\014") #clears console
rm(list=ls()) 
graphics.off()

#### load relevant packages ####
library("readxl")
library("tidyverse")
library("gt")

#### load data ####
dat <- read_excel("El_Tatio_GDGTs_2025.xlsx")

# Define a function to map pH values to colors in the range 1 to 10
color_map_pH <- colorRampPalette(c("darkorchid4", "thistle2"))(10 - 1 + 1)

# Add a new column "col_pH" with the corresponding color hex codes
dat <- transform(dat,
                 col_pH = color_map_pH[cut(dat$pH, breaks = 9, labels = FALSE) + 1])

# Make dataframe for scalebar
pH <- c(seq(1, 10, 1))
col_pH <- c(rep(NA, length(pH)))
col_pH_dat <- as.data.frame(cbind(pH, col_pH))
col_pH_dat <- transform(col_pH_dat,
                        col_pH = color_map_pH[cut(pH, breaks = 9, labels = FALSE) + 1])

# Linear regression
TempvsRI <- lm(Ring_index ~ Temp, data = dat)
summary(TempvsRI)

# Extract the coefficients and R² value
coefficients <- coef(TempvsRI)
slope <- round(coefficients[2], 1)
intercept <- round(coefficients[1], 1)
r_squared <- round(summary(TempvsRI)$r.squared, 2)

# Save the plot as a PNG file
png("RingIndex_vs_Temp.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$Temp, dat$Ring_index,
     las = 1,
     xlim = c(50, 90),
     ylim = c(0, 5),
     pch = NA,  # Do not plot Default shape
     cex = 2,
     col = dat$col_pH,  # Color code points by pH
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Add CL points (squares)
points(CL_data$Temp, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = CL_data$col_pH)  # Use color mapping

# Add IPL points (circles)
points(IPL_data$Temp, IPL_data$Ring_index,  
       pch = 16,    # Circle shape for IPL
       cex = 1,   
       col = IPL_data$col_pH)  # Use color mapping

# Add the regression line
abline(TempvsRI, col = "hotpink", lty = 2, lwd = 3)

# Add axes
axis(1, at = seq(50, 90, 10), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs Temperature", line = 0.5, cex.main = 1.2)
title(xlab = "Temperature", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1.4, cex.lab = 1.3)

# Legend positioned outside the graph area
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
legend("right", inset=c(-0.4,-2), title = "pH", cex = 0.5,
       legend = seq(1, 10, by = 1),
       pch = 15,  
       col = color_map_pH,  
       pt.cex = 2,
       bty = "n",
       y.intersp = 0.8,    # Closer spacing between legend items
       title.adj = 0.8)   # Center the title relative to legend items"))
# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Placeholder colors
       pt.cex = 1, 
       bty = "n",x,
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries)

# Add the 95% CI to linear regression
# new_data <- data.frame(Temp = seq(50, 90, length.out = 100))
# ci_new <- predict(TempvsRI, new_data, interval = "confidence", level = 0.95)

# Ensure the polygon ends at the bounds of the plotting area
# polygon(c(new_data$Temp, rev(new_data$Temp)),
#c(pmax(ci_new[, "lwr"], 0), rev(pmin(ci_new[, "upr"], 5))),  # Clamp CI to plotting area
# col = rgb(col2rgb("grey")[1] / 255,
#col2rgb("grey")[2] / 255,
#col2rgb("grey")[3] / 255,
#alpha = 0.3),
#border = NA)  # No border

# Add the regression line based on the specified equation
segments(x0 = 50, y0 = -0.03 * 50 + 5.3, x1 = 90, y1 = -0.03 * 90 + 5.3, col = "turquoise2", lty = 2, lwd = 3)

# Add regression parameters
# equation_text <- paste("RI =", slope, "* T +", intercept)
# r_squared_text <- paste("R² =", r_squared)
# text(60, 0.6, labels = equation_text, col = "grey", cex = 0.8)
# text(60, 0.2, labels = r_squared_text, col = "grey", cex = 0.8)

# Assuming the following variables are already calculated:
# - slope, intercept, r_squared for El Tatio from TempvsRI
# - slope_yellowstone and intercept_yellowstone for Yellowstone (using the provided equation)

# For Yellowstone, which has a fixed equation
slope_yellowstone <- -0.03
intercept_yellowstone <- 5.3
equation_yellowstone <- paste("RI =", slope_yellowstone, "* T +", intercept_yellowstone)

# Add the linear regression line based on the specified equation
segments(x0 = 50, y0 = -0.03 * 50 + 5.3, x1 = 90, y1 = -0.03 * 90 + 5.3, col = "turquoise2", lty = 2, lwd = 3)

# Add a legend for the two regression lines with parameters
legend("bottomright", inset = c(0, 0),  
       legend = c(paste("El Tatio:", "RI =", slope, "* T +", intercept, " (R² =", r_squared, ")"),
                  paste("Yellowstone:", equation_yellowstone, " (R² = 0.170) ")),
       col = c("hotpink", "turquoise2"),  
       lty = c(2, 2),             
       lwd = 3,                  
       bty = "n",                
       cex = 0.5)  

# Summarize the model
TempvsRI_summary <- summary(TempvsRI)
print(TempvsRI_summary)

dev.off()  # Save the plot
