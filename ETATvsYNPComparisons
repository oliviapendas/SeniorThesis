#### Ring Index vs. pH with ETAT points and YNP regression ####

# Linear regression
pHvsRI <- lm(Ring_index ~ pH, data = dat)
summary(pHvsRI)

# Extract the coefficients and R² value
coefficients <- coef(pHvsRI)
slope <- round(coefficients[2], 2)
intercept <- round(coefficients[1], 1)
r_squared <- round(summary(pHvsRI)$r.squared, 2)

# Save the plot as a PNG file
png("RingIndex_vs_pH.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$pH, dat$Ring_index,
     las = 1,
     xlim = c(1, 10),
     ylim = c(0, 5),
     pch = NA,  # Do not plot Default shape
     cex = 2,
     col = "hotpink",  # Color code points by Temperature
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Add CL points (squares)
points(CL_data$pH, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add IPL points (circles)
points(IPL_data$pH, IPL_data$Ring_index,  
       pch = 1,    # Circle shape for IPL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add the regression line
abline(pHvsRI, col = "hotpink", lwd = 2)

# Add axes
axis(1, at = seq(1, 10, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs pH", line = 0.5, cex.main = 1.2)
title(xlab = "pH", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1, cex.lab = 1.3)

# Legend positioned outside the graph area
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Placeholder colors
       pt.cex = 1, 
       bty = "n",x,
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries)

# Add the new regression line based on y = -0.26 * pH + 4.5
x_values <- seq(0.65, 10.3, length.out = 100)  # X values for the regression line
y_values <- -0.26 * x_values + 4.5  # Calculate corresponding Y values

# Add the new regression line to the existing plot
lines(x_values, y_values, col = "turquoise2", lty = 1, lwd = 2)

# Add a legend for the two regression lines with parameters
legend("bottomright", inset = c(0, 0),  
       legend = c(paste("El Tatio:", "RI =", slope, "* T +", intercept, " (R² =", r_squared, ")"),
                  paste("Yellowstone:", "RI = -0.03 * T + 5.3", " (R² = 0.645) ")),
       col = c("hotpink", "turquoise2"),  
       lty = c(2, 2),             
       lwd = 3,                  
       bty = "n",                
       cex = 0.5)  

dev.off()  # Save the plot

#### New Attempt at Ring Index vs. Temp with confidence intervals points colored by pH ####

# Assume the 'dat' data frame already exists and contains the required columns.
cat("\014") #clears console
rm(list=ls()) 
graphics.off()

#### load relevant packages ####
library("readxl")
library("tidyverse")
library("gt")

#### load data ####
dat <- read_excel("El_Tatio_GDGTs_2025.xlsx")

# Linear regression
TempvsRI <- lm(Ring_index ~ Temp, data = dat)
summary(TempvsRI)

# Extract the coefficients and R² value
coefficients <- coef(TempvsRI)
slope <- round(coefficients[2], 2)
intercept <- round(coefficients[1], 1)
r_squared <- round(summary(TempvsRI)$r.squared, 2)

# Save the plot as a PNG file
png("RingIndex_vs_Temp.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$Temp, dat$Ring_index,
     las = 1,
     xlim = c(50, 90),
     ylim = c(0, 5),
     pch = NA,  # Do not plot Default shape
     cex = 2,
     col = "hotpink",  # Color code points by pH
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Add CL points (squares)
points(CL_data$Temp, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add IPL points (circles)
points(IPL_data$Temp, IPL_data$Ring_index,  
       pch = 16,    # Circle shape for IPL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add the regression line
abline(TempvsRI, col = "hotpink", lty = 2, lwd = 3)

# Add axes
axis(1, at = seq(50, 90, 10), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs Temperature", line = 0.5, cex.main = 1.2)
title(xlab = "Temperature", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1.4, cex.lab = 1.3)

# Legend positioned outside the graph area
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Placeholder colors
       pt.cex = 1, 
       bty = "n",x,
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries)

# Add the regression line based on the specified equation
segments(x0 = 50, y0 = -0.03 * 50 + 5.3, x1 = 90, y1 = -0.03 * 90 + 5.3, col = "turquoise2", lty = 2, lwd = 3)

# For Yellowstone, which has a fixed equation
slope_yellowstone <- -0.03
intercept_yellowstone <- 5.3
equation_yellowstone <- paste("RI =", slope_yellowstone, "* T +", intercept_yellowstone)

# Add the linear regression line based on the specified equation
segments(x0 = 50, y0 = -0.03 * 50 + 5.3, x1 = 90, y1 = -0.03 * 90 + 5.3, col = "turquoise2", lty = 2, lwd = 3)

# Add a legend for the two regression lines with parameters
legend("bottomright", inset = c(0, 0),  
       legend = c(paste("El Tatio:", "RI =", slope, "* T +", intercept, " (R² =", r_squared, ")"),
                  paste("Yellowstone:", equation_yellowstone, " (R² = 0.170) ")),
       col = c("hotpink", "turquoise2"),  
       lty = c(2, 2),             
       lwd = 3,                  
       bty = "n",                
       cex = 0.5)  

# Summarize the model
TempvsRI_summary <- summary(TempvsRI)
print(TempvsRI_summary)

dev.off()  # Save the plot

#### ETAT versus YNP RI vs. pH with points and trend lines for both sites ####

# Assume the 'dat' data frame already exists and contains the required columns.
cat("\014") #clears console
rm(list=ls()) 
graphics.off()

#### load relevant packages ####
library("readxl")
library("tidyverse")
library("gt")

#### load data ####
dat <- read_excel("ETATvsYNP2025.xltx")

# Define a color mapping function
get_color <- function(location) {
  if (location == "ETAT") {
    return("hotpink")
  } else if (location == "YNP") {
    return("turquoise")
  } else {
    return("gray")  # Default for other locations
  }
}

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Separating data into ETAT and YNP
ETAT_data <- subset(dat, Location == "ETAT")
YNP_data <- subset(dat, Location == "YNP")

# Linear regression for ETAT and YNP
ETAT_RIvspH <- lm(Ring_index ~ pH, data = ETAT_data)  # Regression for CL
YNP_RIvspH <- lm(Ring_index ~ pH, data = YNP_data)  # Regression for IPL

# Create the plot
png("Comparison_RingIndex_vs_pH.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$pH, dat$Ring_index,
     las = 1,
     xlim = c(1, 10),
     ylim = c(0, 5),
     pch = NA,  # Do not plot default shape
     cex = 2,
     col = "black",
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Add CL points (squares)
points(CL_data$pH, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = sapply(CL_data$Location, get_color))  # Use color mapping

# Add IPL points (circles)
points(IPL_data$pH, IPL_data$Ring_index,  
       pch = 1,    # Circle shape for IPL
       cex = 1,   
       col = sapply(IPL_data$Location, get_color))  # Use color mapping

# Add linear trend line for ETAT
abline(ETAT_RIvspH, col = get_color("ETAT"), lwd = 2)

# Add linear trend line for YNP
abline(YNP_RIvspH, col = get_color("YNP"), lwd = 2)

# Extracting new prediction data for confidence intervals
# pH_values <- seq(from = 1, to = 10, by = 0.1)  # Define a sequence of pH values for prediction
# newdata_CL <- data.frame(pH = pH_values)
# newdata_IPL <- data.frame(pH = pH_values)

# Get predictions and confidence intervals for CL
# pred_CL <- predict(pHvsCL, newdata_CL, interval = "confidence", level = 0.95)

# Get predictions and confidence intervals for IPL
# pred_IPL <- predict(pHvsIPL, newdata_IPL, interval = "confidence", level = 0.95)

# Adding confidence intervals for CL as a polygon
# polygon(c(newdata_CL$pH, rev(newdata_CL$pH)), 
        # c(pred_CL[, "lwr"], rev(pred_CL[, "upr"])), 
        # col = adjustcolor("red", alpha.f = 0.2), border = NA)  # Adjust color & transparency for visibility

# Adding confidence intervals for IPL as a polygon
# polygon(c(newdata_IPL$pH, rev(newdata_IPL$pH)), 
        # c(pred_IPL[, "lwr"], rev(pred_IPL[, "upr"])), 
        # col = adjustcolor("blue", alpha.f = 0.2), border = NA)  # Adjust color & transparency for visibility

# Add the trend line for CL (dashedline)
# abline(pHvsCL, col = "black", lwd = 2, lty = 2)  # Dotted line for CL

# Add the trend line for IPL (solid line)
# abline(pHvsIPL, col = "black", lwd = 2, lty = 1)  # Dashed line for IPL

# Extract coefficients and R² values for ETAT
coefficients_ETAT <- coef(ETAT_RIvspH)
slope_ETAT <- round(coefficients_ETAT[2], 1)
intercept_ETAT <- round(coefficients_ETAT[1], 1)
r_squared_ETAT <- round(summary(ETAT_RIvspH)$r.squared, 2)

# Extract coefficients and R² values for YNP
coefficients_YNP <- coef(YNP_RIvspH)
slope_YNP <- round(coefficients_YNP[2], 1)
intercept_YNP <- round(coefficients_YNP[1], 1)
r_squared_YNP <- round(summary(YNP_RIvspH)$r.squared, 2)

# Add regression parameters for ETAT
equation_text_ETAT <- paste("El Tatio: RI =", slope_ETAT, "* pH +", intercept_ETAT)
r_squared_text_ETAT <- paste("R² =", r_squared_ETAT)

# Add regression parameters for YNP
equation_text_YNP <- paste("Yellowstone: RI =", slope_YNP, "* pH +", intercept_YNP)
r_squared_text_YNP <- paste("R² =", r_squared_YNP)

# Create a legend for ETAT
legend("bottomleft", inset = c(0, 0.10),
       legend = c(equation_text_ETAT, r_squared_text_ETAT),
       col = "hotpink",
       lwd = 2,
       lty = c(1, NA),
       bty = "n", cex = 0.5)  

# Create a legend for YNP, positioned just below the ETAT legend
legend("bottomleft", inset = c(0, 0),  # Adjusted Y position
       legend = c(equation_text_YNP, r_squared_text_YNP),
       col = "turquoise",
       lwd = 2,
       lty = c(1, NA),
       bty = "n", cex = 0.5)

# Add axes
axis(1, at = seq(1, 10, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs pH", line = 0.5, cex.main = 1.2)
title(xlab = "pH", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1.2, cex.lab = 1.3)

# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Colors matching the trend lines
       pt.cex = 1,
       bty = "n",
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries

# Summarize the ETAT model
ETAT_RIvspH_summary <- summary(ETAT_RIvspH)
print(ETAT_RIvspH_summary)

# Summarize the YNP model
YNP_RIvspH_summary <- summary(YNP_RIvspH)
print(YNP_RIvspH_summary)

dev.off()  # Save the plot

#### ETAT versus YNP RI vs. Temp with points and trend lines for both sites ####

# Assume the 'dat' data frame already exists and contains the required columns.
cat("\014") #clears console
rm(list=ls()) 
graphics.off()

#### load relevant packages ####
library("readxl")
library("tidyverse")
library("gt")

#### load data ####
dat <- read_excel("ETATvsYNP2025.xltx")

# Define a color mapping function
get_color <- function(location) {
  if (location == "ETAT") {
    return("hotpink")
  } else if (location == "YNP") {
    return("turquoise")
  } else {
    return("gray")  # Default for other locations
  }
}

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Separating data into ETAT and YNP
ETAT_data <- subset(dat, Location == "ETAT")
YNP_data <- subset(dat, Location == "YNP")

# Linear regression for ETAT and YNP
ETAT_RIvsTemp <- lm(Ring_index ~ Temp, data = ETAT_data)  # Regression for CL
YNP_RIvsTemp <- lm(Ring_index ~ Temp, data = YNP_data)  # Regression for IPL

# Create the plot
png("Comparison_RingIndex_vs_Temp.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$Temp, dat$Ring_index,
     las = 1,
     xlim = c(50, 100),
     ylim = c(0, 5),
     pch = NA,  # Do not plot default shape
     cex = 2,
     col = "black",
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Add CL points (squares)
points(CL_data$Temp, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = sapply(CL_data$Location, get_color))  # Use color mapping

# Add IPL points (circles)
points(IPL_data$Temp, IPL_data$Ring_index,  
       pch = 1,    # Circle shape for IPL
       cex = 1,   
       col = sapply(IPL_data$Location, get_color))  # Use color mapping

# Add linear trend line for ETAT
abline(ETAT_RIvsTemp, col = get_color("ETAT"), lty = 2, lwd = 2)

# Add linear trend line for YNP
abline(YNP_RIvsTemp, col = get_color("YNP"), lty = 2, lwd = 2)

# Extract coefficients and R² values for ETAT
coefficients_ETAT <- coef(ETAT_RIvsTemp)
slope_ETAT <- round(coefficients_ETAT[2], 2)
intercept_ETAT <- round(coefficients_ETAT[1], 1)
r_squared_ETAT <- round(summary(ETAT_RIvsTemp)$r.squared, 2)

# Extract coefficients and R² values for YNP
coefficients_YNP <- coef(YNP_RIvsTemp)
slope_YNP <- round(coefficients_YNP[2], 2)
intercept_YNP <- round(coefficients_YNP[1], 1)
r_squared_YNP <- round(summary(YNP_RIvsTemp)$r.squared, 2)

# Add regression parameters for ETAT
equation_text_ETAT <- paste("El Tatio: RI =", slope_ETAT, "* Temp +", intercept_ETAT)
r_squared_text_ETAT <- paste("R² =", r_squared_ETAT)

# Add regression parameters for YNP
equation_text_YNP <- paste("Yellowstone: RI =", slope_YNP, "* Temp +", intercept_YNP)
r_squared_text_YNP <- paste("R² =", r_squared_YNP)

# Create a legend for ETAT
legend("bottomleft", inset = c(0, 0.10),
       legend = c(equation_text_ETAT, r_squared_text_ETAT),
       col = "hotpink",
       lwd = 2,
       lty = c(2, NA),
       bty = "n", cex = 0.5)  

# Create a legend for YNP, positioned just below the ETAT legend
legend("bottomleft", inset = c(0, 0),  # Adjusted Y position
       legend = c(equation_text_YNP, r_squared_text_YNP),
       col = "turquoise",
       lwd = 2,
       lty = c(2, NA),
       bty = "n", cex = 0.5)

# Add axes
axis(1, at = seq(50, 100, 10), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs Temperature", line = 0.5, cex.main = 1.2)
title(xlab = "Temperature (°C)", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1.2, cex.lab = 1.3)

# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Colors matching the trend lines
       pt.cex = 1,
       bty = "n",
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries

# Summarize the ETAT model
ETAT_RIvsTemp_summary <- summary(ETAT_RIvsTemp)
print(ETAT_RIvsTemp_summary)

# Summarize the YNP model
YNP_RIvsTemp_summary <- summary(YNP_RIvsTemp)
print(YNP_RIvsTemp_summary)

dev.off()  # Save the plot  
