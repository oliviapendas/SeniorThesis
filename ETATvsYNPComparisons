#### Ring Index vs. pH with ETAT points and YNP regression ####

# Linear regression
pHvsRI <- lm(Ring_index ~ pH, data = dat)
summary(pHvsRI)

# Extract the coefficients and R² value
coefficients <- coef(pHvsRI)
slope <- round(coefficients[2], 2)
intercept <- round(coefficients[1], 1)
r_squared <- round(summary(pHvsRI)$r.squared, 2)

# Save the plot as a PNG file
png("RingIndex_vs_pH.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$pH, dat$Ring_index,
     las = 1,
     xlim = c(1, 10),
     ylim = c(0, 5),
     pch = NA,  # Do not plot Default shape
     cex = 2,
     col = "hotpink",  # Color code points by Temperature
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Add CL points (squares)
points(CL_data$pH, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add IPL points (circles)
points(IPL_data$pH, IPL_data$Ring_index,  
       pch = 1,    # Circle shape for IPL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add the regression line
abline(pHvsRI, col = "hotpink", lwd = 2)

# Add axes
axis(1, at = seq(1, 10, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs pH", line = 0.5, cex.main = 1.2)
title(xlab = "pH", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1, cex.lab = 1.3)

# Legend positioned outside the graph area
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Placeholder colors
       pt.cex = 1, 
       bty = "n",x,
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries)

# Add the new regression line based on y = -0.26 * pH + 4.5
x_values <- seq(0.65, 10.3, length.out = 100)  # X values for the regression line
y_values <- -0.26 * x_values + 4.5  # Calculate corresponding Y values

# Add the new regression line to the existing plot
lines(x_values, y_values, col = "turquoise2", lty = 1, lwd = 2)

# Add a legend for the two regression lines with parameters
legend("bottomright", inset = c(0, 0),  
       legend = c(paste("El Tatio:", "RI =", slope, "* T +", intercept, " (R² =", r_squared, ")"),
                  paste("Yellowstone:", "RI = -0.03 * T + 5.3", " (R² = 0.645) ")),
       col = c("hotpink", "turquoise2"),  
       lty = c(2, 2),             
       lwd = 3,                  
       bty = "n",                
       cex = 0.5)  

dev.off()  # Save the plot

#### New Attempt at Ring Index vs. Temp with confidence intervals points colored by pH ####

# Assume the 'dat' data frame already exists and contains the required columns.
cat("\014") #clears console
rm(list=ls()) 
graphics.off()

#### load relevant packages ####
library("readxl")
library("tidyverse")
library("gt")

#### load data ####
dat <- read_excel("El_Tatio_GDGTs_2025.xlsx")

# Linear regression
TempvsRI <- lm(Ring_index ~ Temp, data = dat)
summary(TempvsRI)

# Extract the coefficients and R² value
coefficients <- coef(TempvsRI)
slope <- round(coefficients[2], 2)
intercept <- round(coefficients[1], 1)
r_squared <- round(summary(TempvsRI)$r.squared, 2)

# Save the plot as a PNG file
png("RingIndex_vs_Temp.png", width = 4, height = 3, units = 'in', res = 300)
par(mfrow = c(1, 1), mar = c(3, 3, 2, 6), mgp = c(3, 0.4, 0))  # Increased right margin

# Create the initial plot
plot(dat$Temp, dat$Ring_index,
     las = 1,
     xlim = c(50, 90),
     ylim = c(0, 5),
     pch = NA,  # Do not plot Default shape
     cex = 2,
     col = "hotpink",  # Color code points by pH
     lwd = 1.5,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

# Separating data into CL and IPL
CL_data <- subset(dat, Type == "CL")
IPL_data <- subset(dat, Type == "IPL")

# Add CL points (squares)
points(CL_data$Temp, CL_data$Ring_index,  
       pch = 15,   # Square shape for CL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add IPL points (circles)
points(IPL_data$Temp, IPL_data$Ring_index,  
       pch = 16,    # Circle shape for IPL
       cex = 1,   
       col = "hotpink")  # Use color mapping

# Add the regression line
abline(TempvsRI, col = "hotpink", lty = 2, lwd = 3)

# Add axes
axis(1, at = seq(50, 90, 10), las = 1, tck = -0.035, cex.axis = 1, line = 0)
axis(2, at = seq(0, 5, 1), las = 1, tck = -0.035, cex.axis = 1, line = 0)

# Titles
title(main = "Ring Index vs Temperature", line = 0.5, cex.main = 1.2)
title(xlab = "Temperature", line = 1.4, cex.lab = 1.3)
title(ylab = "Ring Index", line = 1.4, cex.lab = 1.3)

# Legend positioned outside the graph area
par(mar=c(5.1, 4.1, 4.1, 8.1), xpd=TRUE)
# Add Legend for CL and IPL shapes
legend("bottomright", inset = c(-0.65, -0.3), title = "Type",
       legend = c("CL (Squares)", "IPL (Circles)"),
       pch = c(15, 1),  # Square for CL, Circle for IPL
       col = c("black", "black"),  # Placeholder colors
       pt.cex = 1, 
       bty = "n",x,
       cex = 0.8,          # Smaller text size (adjust as needed)
       text.width = strwidth("CL (Squares)"), # To ensure both entries fit
       y.intersp = 0.7)    # Closer spacing between legend entries)

# Add the regression line based on the specified equation
segments(x0 = 50, y0 = -0.03 * 50 + 5.3, x1 = 90, y1 = -0.03 * 90 + 5.3, col = "turquoise2", lty = 2, lwd = 3)

# For Yellowstone, which has a fixed equation
slope_yellowstone <- -0.03
intercept_yellowstone <- 5.3
equation_yellowstone <- paste("RI =", slope_yellowstone, "* T +", intercept_yellowstone)

# Add the linear regression line based on the specified equation
segments(x0 = 50, y0 = -0.03 * 50 + 5.3, x1 = 90, y1 = -0.03 * 90 + 5.3, col = "turquoise2", lty = 2, lwd = 3)

# Add a legend for the two regression lines with parameters
legend("bottomright", inset = c(0, 0),  
       legend = c(paste("El Tatio:", "RI =", slope, "* T +", intercept, " (R² =", r_squared, ")"),
                  paste("Yellowstone:", equation_yellowstone, " (R² = 0.170) ")),
       col = c("hotpink", "turquoise2"),  
       lty = c(2, 2),             
       lwd = 3,                  
       bty = "n",                
       cex = 0.5)  

# Summarize the model
TempvsRI_summary <- summary(TempvsRI)
print(TempvsRI_summary)

dev.off()  # Save the plot
